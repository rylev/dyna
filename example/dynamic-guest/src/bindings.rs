// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_hello_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    T::hello();
}
pub trait Guest {
    fn hello();
}
#[doc(hidden)]

macro_rules! __export_world_guest_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "hello"]
    unsafe extern "C" fn export_hello() {
      $($path_to_types)*::_export_hello_cabi::<$ty>()
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_guest_cabi;
#[allow(dead_code)]
pub mod component {
    #[allow(dead_code)]
    pub mod dyna {
        #[allow(dead_code, clippy::all)]
        pub mod wit {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct World {
                handle: _rt::Resource<World>,
            }

            impl World {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for World {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:dyna/wit")]
                        extern "C" {
                            #[link_name = "[resource-drop]world"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Type {
                handle: _rt::Resource<Type>,
            }

            impl Type {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Type {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:dyna/wit")]
                        extern "C" {
                            #[link_name = "[resource-drop]type"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            pub struct Function {
                pub params: _rt::Vec<(_rt::String, Type)>,
                pub result: Type,
            }
            impl ::core::fmt::Debug for Function {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Function")
                        .field("params", &self.params)
                        .field("result", &self.result)
                        .finish()
                }
            }
            pub struct Interface {
                pub functions: _rt::Vec<(_rt::String, Function)>,
            }
            impl ::core::fmt::Debug for Interface {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Interface")
                        .field("functions", &self.functions)
                        .finish()
                }
            }
            pub enum ExportKind {
                Function(Function),
                Interface(Interface),
            }
            impl ::core::fmt::Debug for ExportKind {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ExportKind::Function(e) => {
                            f.debug_tuple("ExportKind::Function").field(e).finish()
                        }
                        ExportKind::Interface(e) => {
                            f.debug_tuple("ExportKind::Interface").field(e).finish()
                        }
                    }
                }
            }
            pub struct Export {
                pub name: _rt::String,
                pub kind: ExportKind,
            }
            impl ::core::fmt::Debug for Export {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Export")
                        .field("name", &self.name)
                        .field("kind", &self.kind)
                        .finish()
                }
            }
            pub struct ResultType {
                pub ok: Option<Type>,
                pub err: Option<Type>,
            }
            impl ::core::fmt::Debug for ResultType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ResultType")
                        .field("ok", &self.ok)
                        .field("err", &self.err)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct RecordType {
                pub name: _rt::String,
            }
            impl ::core::fmt::Debug for RecordType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RecordType")
                        .field("name", &self.name)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct EnumType {
                pub name: _rt::String,
            }
            impl ::core::fmt::Debug for EnumType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EnumType")
                        .field("name", &self.name)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct VariantType {
                pub name: _rt::String,
            }
            impl ::core::fmt::Debug for VariantType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("VariantType")
                        .field("name", &self.name)
                        .finish()
                }
            }
            pub enum TypeKind {
                Bool,
                U8,
                U16,
                U32,
                U64,
                S8,
                S16,
                S32,
                S64,
                F32,
                F64,
                Char,
                String,
                List(Type),
                Tuple(_rt::Vec<Type>),
                Option(Type),
                Result(ResultType),
                Enum(EnumType),
                Variant(VariantType),
                Record(RecordType),
            }
            impl ::core::fmt::Debug for TypeKind {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        TypeKind::Bool => f.debug_tuple("TypeKind::Bool").finish(),
                        TypeKind::U8 => f.debug_tuple("TypeKind::U8").finish(),
                        TypeKind::U16 => f.debug_tuple("TypeKind::U16").finish(),
                        TypeKind::U32 => f.debug_tuple("TypeKind::U32").finish(),
                        TypeKind::U64 => f.debug_tuple("TypeKind::U64").finish(),
                        TypeKind::S8 => f.debug_tuple("TypeKind::S8").finish(),
                        TypeKind::S16 => f.debug_tuple("TypeKind::S16").finish(),
                        TypeKind::S32 => f.debug_tuple("TypeKind::S32").finish(),
                        TypeKind::S64 => f.debug_tuple("TypeKind::S64").finish(),
                        TypeKind::F32 => f.debug_tuple("TypeKind::F32").finish(),
                        TypeKind::F64 => f.debug_tuple("TypeKind::F64").finish(),
                        TypeKind::Char => f.debug_tuple("TypeKind::Char").finish(),
                        TypeKind::String => f.debug_tuple("TypeKind::String").finish(),
                        TypeKind::List(e) => f.debug_tuple("TypeKind::List").field(e).finish(),
                        TypeKind::Tuple(e) => f.debug_tuple("TypeKind::Tuple").field(e).finish(),
                        TypeKind::Option(e) => f.debug_tuple("TypeKind::Option").field(e).finish(),
                        TypeKind::Result(e) => f.debug_tuple("TypeKind::Result").field(e).finish(),
                        TypeKind::Enum(e) => f.debug_tuple("TypeKind::Enum").field(e).finish(),
                        TypeKind::Variant(e) => {
                            f.debug_tuple("TypeKind::Variant").field(e).finish()
                        }
                        TypeKind::Record(e) => f.debug_tuple("TypeKind::Record").field(e).finish(),
                    }
                }
            }
            impl World {
                #[allow(unused_unsafe, clippy::all)]
                pub fn exports(&self) -> _rt::Vec<Export> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:dyna/wit")]
                        extern "C" {
                            #[link_name = "[method]world.exports"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base30 = l1;
                        let len30 = l2;
                        let mut result30 = _rt::Vec::with_capacity(len30);
                        for i in 0..len30 {
                            let base = base30.add(i * 24);
                            let e30 = {
                                let l3 = *base.add(0).cast::<*mut u8>();
                                let l4 = *base.add(4).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                let l6 = i32::from(*base.add(8).cast::<u8>());
                                let v29 = match l6 {
                                    0 => {
                                        let e29 = {
                                            let l7 = *base.add(12).cast::<*mut u8>();
                                            let l8 = *base.add(16).cast::<usize>();
                                            let base13 = l7;
                                            let len13 = l8;
                                            let mut result13 = _rt::Vec::with_capacity(len13);
                                            for i in 0..len13 {
                                                let base = base13.add(i * 12);
                                                let e13 = {
                                                    let l9 = *base.add(0).cast::<*mut u8>();
                                                    let l10 = *base.add(4).cast::<usize>();
                                                    let len11 = l10;
                                                    let bytes11 = _rt::Vec::from_raw_parts(
                                                        l9.cast(),
                                                        len11,
                                                        len11,
                                                    );
                                                    let l12 = *base.add(8).cast::<i32>();

                                                    (
                                                        _rt::string_lift(bytes11),
                                                        Type::from_handle(l12 as u32),
                                                    )
                                                };
                                                result13.push(e13);
                                            }
                                            _rt::cabi_dealloc(base13, len13 * 12, 4);
                                            let l14 = *base.add(20).cast::<i32>();

                                            Function {
                                                params: result13,
                                                result: Type::from_handle(l14 as u32),
                                            }
                                        };
                                        ExportKind::Function(e29)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e29 = {
                                            let l15 = *base.add(12).cast::<*mut u8>();
                                            let l16 = *base.add(16).cast::<usize>();
                                            let base28 = l15;
                                            let len28 = l16;
                                            let mut result28 = _rt::Vec::with_capacity(len28);
                                            for i in 0..len28 {
                                                let base = base28.add(i * 20);
                                                let e28 = {
                                                    let l17 = *base.add(0).cast::<*mut u8>();
                                                    let l18 = *base.add(4).cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                    let l21 = *base.add(12).cast::<usize>();
                                                    let base26 = l20;
                                                    let len26 = l21;
                                                    let mut result26 =
                                                        _rt::Vec::with_capacity(len26);
                                                    for i in 0..len26 {
                                                        let base = base26.add(i * 12);
                                                        let e26 = {
                                                            let l22 =
                                                                *base.add(0).cast::<*mut u8>();
                                                            let l23 = *base.add(4).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );
                                                            let l25 = *base.add(8).cast::<i32>();

                                                            (
                                                                _rt::string_lift(bytes24),
                                                                Type::from_handle(l25 as u32),
                                                            )
                                                        };
                                                        result26.push(e26);
                                                    }
                                                    _rt::cabi_dealloc(base26, len26 * 12, 4);
                                                    let l27 = *base.add(16).cast::<i32>();

                                                    (
                                                        _rt::string_lift(bytes19),
                                                        Function {
                                                            params: result26,
                                                            result: Type::from_handle(l27 as u32),
                                                        },
                                                    )
                                                };
                                                result28.push(e28);
                                            }
                                            _rt::cabi_dealloc(base28, len28 * 20, 4);

                                            Interface {
                                                functions: result28,
                                            }
                                        };
                                        ExportKind::Interface(e29)
                                    }
                                };

                                Export {
                                    name: _rt::string_lift(bytes5),
                                    kind: v29,
                                }
                            };
                            result30.push(e30);
                        }
                        _rt::cabi_dealloc(base30, len30 * 24, 4);
                        result30
                    }
                }
            }
            impl Type {
                #[allow(unused_unsafe, clippy::all)]
                pub fn kind(&self) -> TypeKind {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:dyna/wit")]
                        extern "C" {
                            #[link_name = "[method]type.kind"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v21 = match l1 {
                            0 => TypeKind::Bool,
                            1 => TypeKind::U8,
                            2 => TypeKind::U16,
                            3 => TypeKind::U32,
                            4 => TypeKind::U64,
                            5 => TypeKind::S8,
                            6 => TypeKind::S16,
                            7 => TypeKind::S32,
                            8 => TypeKind::S64,
                            9 => TypeKind::F32,
                            10 => TypeKind::F64,
                            11 => TypeKind::Char,
                            12 => TypeKind::String,
                            13 => {
                                let e21 = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    Type::from_handle(l2 as u32)
                                };
                                TypeKind::List(e21)
                            }
                            14 => {
                                let e21 = {
                                    let l3 = *ptr0.add(4).cast::<*mut u8>();
                                    let l4 = *ptr0.add(8).cast::<usize>();
                                    let base6 = l3;
                                    let len6 = l4;
                                    let mut result6 = _rt::Vec::with_capacity(len6);
                                    for i in 0..len6 {
                                        let base = base6.add(i * 4);
                                        let e6 = {
                                            let l5 = *base.add(0).cast::<i32>();

                                            Type::from_handle(l5 as u32)
                                        };
                                        result6.push(e6);
                                    }
                                    _rt::cabi_dealloc(base6, len6 * 4, 4);

                                    result6
                                };
                                TypeKind::Tuple(e21)
                            }
                            15 => {
                                let e21 = {
                                    let l7 = *ptr0.add(4).cast::<i32>();

                                    Type::from_handle(l7 as u32)
                                };
                                TypeKind::Option(e21)
                            }
                            16 => {
                                let e21 = {
                                    let l8 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let l10 = i32::from(*ptr0.add(12).cast::<u8>());

                                    ResultType {
                                        ok: match l8 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l9 = *ptr0.add(8).cast::<i32>();

                                                    Type::from_handle(l9 as u32)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        err: match l10 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l11 = *ptr0.add(16).cast::<i32>();

                                                    Type::from_handle(l11 as u32)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                TypeKind::Result(e21)
                            }
                            17 => {
                                let e21 = {
                                    let l12 = *ptr0.add(4).cast::<*mut u8>();
                                    let l13 = *ptr0.add(8).cast::<usize>();
                                    let len14 = l13;
                                    let bytes14 =
                                        _rt::Vec::from_raw_parts(l12.cast(), len14, len14);

                                    EnumType {
                                        name: _rt::string_lift(bytes14),
                                    }
                                };
                                TypeKind::Enum(e21)
                            }
                            18 => {
                                let e21 = {
                                    let l15 = *ptr0.add(4).cast::<*mut u8>();
                                    let l16 = *ptr0.add(8).cast::<usize>();
                                    let len17 = l16;
                                    let bytes17 =
                                        _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                    VariantType {
                                        name: _rt::string_lift(bytes17),
                                    }
                                };
                                TypeKind::Variant(e21)
                            }
                            n => {
                                debug_assert_eq!(n, 19, "invalid enum discriminant");
                                let e21 = {
                                    let l18 = *ptr0.add(4).cast::<*mut u8>();
                                    let l19 = *ptr0.add(8).cast::<usize>();
                                    let len20 = l19;
                                    let bytes20 =
                                        _rt::Vec::from_raw_parts(l18.cast(), len20, len20);

                                    RecordType {
                                        name: _rt::string_lift(bytes20),
                                    }
                                };
                                TypeKind::Record(e21)
                            }
                        };
                        v21
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod dynamic_component {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type World = super::super::super::component::dyna::wit::World;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Engine {
                handle: _rt::Resource<Engine>,
            }

            impl Engine {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Engine {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:dyna/dynamic-component")]
                        extern "C" {
                            #[link_name = "[resource-drop]engine"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Component {
                handle: _rt::Resource<Component>,
            }

            impl Component {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Component {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:dyna/dynamic-component")]
                        extern "C" {
                            #[link_name = "[resource-drop]component"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Clone)]
            pub enum Val {
                String(_rt::String),
            }
            impl ::core::fmt::Debug for Val {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Val::String(e) => f.debug_tuple("Val::String").field(e).finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum ResolveError {
                InvalidBytes(_rt::String),
            }
            impl ::core::fmt::Debug for ResolveError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ResolveError::InvalidBytes(e) => f
                            .debug_tuple("ResolveError::InvalidBytes")
                            .field(e)
                            .finish(),
                    }
                }
            }
            impl ::core::fmt::Display for ResolveError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for ResolveError {}
            #[derive(Clone)]
            pub enum LoadError {
                InvalidBytes(_rt::String),
            }
            impl ::core::fmt::Debug for LoadError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LoadError::InvalidBytes(e) => {
                            f.debug_tuple("LoadError::InvalidBytes").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for LoadError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for LoadError {}
            #[derive(Clone, Copy)]
            pub enum CallError {
                NoFunction,
            }
            impl ::core::fmt::Debug for CallError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        CallError::NoFunction => f.debug_tuple("CallError::NoFunction").finish(),
                    }
                }
            }
            impl ::core::fmt::Display for CallError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for CallError {}
            impl Engine {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:dyna/dynamic-component")]
                        extern "C" {
                            #[link_name = "[constructor]engine"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Engine::from_handle(ret as u32)
                    }
                }
            }
            impl Engine {
                #[allow(unused_unsafe, clippy::all)]
                pub fn load_component(&self, bytes: &[u8]) -> Result<Component, LoadError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = bytes;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:dyna/dynamic-component")]
                        extern "C" {
                            #[link_name = "[method]engine.load-component"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    Component::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v8 = match l4 {
                                        n => {
                                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                                            let e8 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            LoadError::InvalidBytes(e8)
                                        }
                                    };

                                    v8
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Component {
                #[allow(unused_unsafe, clippy::all)]
                pub fn world(&self) -> Result<World, ResolveError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:dyna/dynamic-component")]
                        extern "C" {
                            #[link_name = "[method]component.world"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::component::dyna::wit::World::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v7 = match l3 {
                                        n => {
                                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                                            let e7 = {
                                                let l4 = *ptr0.add(8).cast::<*mut u8>();
                                                let l5 = *ptr0.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 =
                                                    _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                                _rt::string_lift(bytes6)
                                            };
                                            ResolveError::InvalidBytes(e7)
                                        }
                                    };

                                    v7
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Component {
                #[allow(unused_unsafe, clippy::all)]
                pub fn call(&self, name: &str, params: &[Val]) -> Result<_rt::Vec<Val>, CallError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec2 = params;
                        let len2 = vec2.len();
                        let layout2 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 12, 4);
                        let result2 = if layout2.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout2);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec2.into_iter().enumerate() {
                            let base = result2.add(i * 12);
                            {
                                match e {
                                    Val::String(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(8).cast::<usize>() = len1;
                                        *base.add(4).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                }
                            }
                        }
                        let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:dyna/dynamic-component")]
                        extern "C" {
                            #[link_name = "[method]component.call"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result2,
                            len2,
                            ptr3,
                        );
                        let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                        if layout2.size() != 0 {
                            _rt::alloc::dealloc(result2.cast(), layout2);
                        }
                        match l4 {
                            0 => {
                                let e = {
                                    let l5 = *ptr3.add(4).cast::<*mut u8>();
                                    let l6 = *ptr3.add(8).cast::<usize>();
                                    let base12 = l5;
                                    let len12 = l6;
                                    let mut result12 = _rt::Vec::with_capacity(len12);
                                    for i in 0..len12 {
                                        let base = base12.add(i * 12);
                                        let e12 = {
                                            let l7 = i32::from(*base.add(0).cast::<u8>());
                                            let v11 = match l7 {
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 0,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e11 = {
                                                        let l8 = *base.add(4).cast::<*mut u8>();
                                                        let l9 = *base.add(8).cast::<usize>();
                                                        let len10 = l9;
                                                        let bytes10 = _rt::Vec::from_raw_parts(
                                                            l8.cast(),
                                                            len10,
                                                            len10,
                                                        );

                                                        _rt::string_lift(bytes10)
                                                    };
                                                    Val::String(e11)
                                                }
                                            };

                                            v11
                                        };
                                        result12.push(e12);
                                    }
                                    _rt::cabi_dealloc(base12, len12 * 12, 4);

                                    result12
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l13 = i32::from(*ptr3.add(4).cast::<u8>());
                                    let v14 = match l13 {
                                        n => {
                                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                                            CallError::NoFunction
                                        }
                                    };

                                    v14
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub use alloc_crate::alloc;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_guest_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_guest_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_guest_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:guest:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1157] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x89\x08\x01A\x02\x01\
A\x07\x01B\"\x04\0\x05world\x03\x01\x04\0\x04type\x03\x01\x01i\x01\x01o\x02s\x02\
\x01p\x03\x01r\x02\x06params\x04\x06result\x02\x04\0\x08function\x03\0\x05\x01o\x02\
s\x06\x01p\x07\x01r\x01\x09functions\x08\x04\0\x09interface\x03\0\x09\x01q\x02\x08\
function\x01\x06\0\x09interface\x01\x0a\0\x04\0\x0bexport-kind\x03\0\x0b\x01r\x02\
\x04names\x04kind\x0c\x04\0\x06export\x03\0\x0d\x01k\x02\x01r\x02\x02ok\x0f\x03e\
rr\x0f\x04\0\x0bresult-type\x03\0\x10\x01r\x01\x04names\x04\0\x0brecord-type\x03\
\0\x12\x01r\x01\x04names\x04\0\x09enum-type\x03\0\x14\x01r\x01\x04names\x04\0\x0c\
variant-type\x03\0\x16\x01p\x02\x01q\x14\x04bool\0\0\x02u8\0\0\x03u16\0\0\x03u32\
\0\0\x03u64\0\0\x02s8\0\0\x03s16\0\0\x03s32\0\0\x03s64\0\0\x03f32\0\0\x03f64\0\0\
\x04char\0\0\x06string\0\0\x04list\x01\x02\0\x05tuple\x01\x18\0\x06option\x01\x02\
\0\x06result\x01\x11\0\x04enum\x01\x15\0\x07variant\x01\x17\0\x06record\x01\x13\0\
\x04\0\x09type-kind\x03\0\x19\x01h\0\x01p\x0e\x01@\x01\x04self\x1b\0\x1c\x04\0\x15\
[method]world.exports\x01\x1d\x01h\x01\x01@\x01\x04self\x1e\0\x1a\x04\0\x11[meth\
od]type.kind\x01\x1f\x03\x01\x12component:dyna/wit\x05\0\x02\x03\0\0\x05world\x01\
B\x1e\x02\x03\x02\x01\x01\x04\0\x05world\x03\0\0\x04\0\x06engine\x03\x01\x04\0\x09\
component\x03\x01\x01q\x01\x06string\x01s\0\x04\0\x03val\x03\0\x04\x01q\x01\x0di\
nvalid-bytes\x01s\0\x04\0\x0dresolve-error\x03\0\x06\x01q\x01\x0dinvalid-bytes\x01\
s\0\x04\0\x0aload-error\x03\0\x08\x01q\x01\x0bno-function\0\0\x04\0\x0acall-erro\
r\x03\0\x0a\x01i\x02\x01@\0\0\x0c\x04\0\x13[constructor]engine\x01\x0d\x01h\x02\x01\
p}\x01i\x03\x01j\x01\x10\x01\x09\x01@\x02\x04self\x0e\x05bytes\x0f\0\x11\x04\0\x1d\
[method]engine.load-component\x01\x12\x01h\x03\x01i\x01\x01j\x01\x14\x01\x07\x01\
@\x01\x04self\x13\0\x15\x04\0\x17[method]component.world\x01\x16\x01p\x05\x01j\x01\
\x17\x01\x0b\x01@\x03\x04self\x13\x04names\x06params\x17\0\x18\x04\0\x16[method]\
component.call\x01\x19\x03\x01\x20component:dyna/dynamic-component\x05\x02\x01@\0\
\x01\0\x04\0\x05hello\x01\x03\x04\x01\x15component:guest/guest\x04\0\x0b\x0b\x01\
\0\x05guest\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
